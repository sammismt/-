import tkinter as tk

app = tk.Tk() 
app.title('美食地圖')

from tkinter import ttk
city_label = tk.Label(app,text = "請選擇您想搜尋的城市", fg = '#8592A2', width=30, anchor = 'w')
city_label.grid(column=0, row=0, ipadx=5, pady=5, sticky=tk.W+tk.N)

city_box = ttk.Combobox(app, values=["台北市", "新北市","基隆市","桃園市","新竹縣","苗栗縣","台中市","彰化縣","雲林縣","嘉義縣","台南市","高雄市","屏東縣","台東縣","花蓮縣","宜蘭縣","南投縣","澎湖縣","連江縣"], state="readonly", width=10) 
city_box.grid(column=1, row=0, ipadx=5, pady=5, sticky=tk.W+tk.N)
city_box.current(0)

destination_label = tk.Label(app, text = "請輸入更詳細的地區（如XX鄉、XX站）", fg = '#7D6252', width=30, anchor = 'w')
destination_label.grid(column=0, row=1, ipadx=5, pady=5, sticky=tk.W+tk.N)
destination_entry = tk.Entry(app, width=10)
destination_entry.grid(column=1, row=1, padx=10, pady=5, sticky=tk.W+tk.N)

labelrestnum = tk.Label(app,text = "請選擇欲獲得的店家數量", fg = '#8592A2', width=30, anchor = 'w')
labelrestnum.grid(column=0, row=2, ipadx=5, pady=5, sticky=tk.W+tk.N)

restnum_box = ttk.Combobox(app, values=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], state="readonly", width=10) 
restnum_box.grid(column=1, row=2, ipadx=5, pady=5, sticky=tk.W+tk.N)
restnum_box.current(0)

restkind_label = tk.Label(app,text = "請選擇您想要的店家種類", fg = '#7D6252', width=30, anchor = 'w')
restkind_label.grid(column=0, row=3, ipadx=5, pady=5, sticky=tk.W+tk.N)

restkind_box = ttk.Combobox(app, values=['餐廳','咖啡廳','小吃','不限'], state="readonly", width=10) 
restkind_box.grid(column=1, row=3, ipadx=5, pady=5, sticky=tk.W+tk.N)
restkind_box.current(0)

foodkind_label = tk.Label(app, text = "請輸入您想吃哪一式料理，如泰式、義式、不限", fg = '#8592A2', width=30, anchor = 'w')
foodkind_label.grid(column=0, row=4, ipadx=5, pady=5, sticky=tk.W+tk.N)
foodkind_entry = tk.Entry(app, width=10)
foodkind_entry.grid(column=1, row=4, padx=10, pady=5, sticky=tk.W+tk.N)

day_label = tk.Label(app,text = "請選擇您想要搜尋的日期", fg = '#7D6252', width=30, anchor = 'w')
day_label.grid(column=0, row=5, ipadx=5, pady=5, sticky=tk.W+tk.N)

day_box = ttk.Combobox(app, values=['星期一','星期二','星期三','星期四','星期五','星期六','星期日'], state="readonly", width=10) 
day_box.grid(column=1, row=5, ipadx=5, pady=5, sticky=tk.W+tk.N)
day_box.current(0)

time_label = tk.Label(app,text = "請選擇您想要搜尋的時間（24小時制）", fg = '#8592A2', width=30, anchor = 'w')
time_label.grid(column=0, row=6, ipadx=5, pady=5, sticky=tk.W+tk.N)

time_box = ttk.Combobox(app, values=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], state="readonly", width=10) 
time_box.grid(column=1, row=6, ipadx=5, pady=5, sticky=tk.W+tk.N)
time_box.current(0)

hr_box = ttk.Combobox(app, values=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], state="readonly", width=10) 
hr_box.grid(column=1, row=6, ipadx=5, pady=5, sticky=tk.W+tk.N)
hr_box.current(0)

min_box = ttk.Combobox(app, values=['00', '30'], state="readonly", width=10) 
min_box.grid(column=2, row=6, ipadx=5, pady=5, sticky=tk.W+tk.N)
min_box.current(0)

keyword_label = tk.Label(app,text = "請選擇您的用餐條件", fg = '#7D6252', width=30, anchor = 'w')
keyword_label.grid(column=0, row=7, ipadx=5, pady=5, sticky=tk.W+tk.N)

keyword1_box = ttk.Combobox(app, values=['無', '外送', '外帶', '內用', '啤酒', '早餐', '午餐', '晚餐', '洗手間', '適合兒童', '氣氛悠閒', '環境舒適', '適合團體', '接受訂位', '信用卡', '免下車服務', '員工會接受體溫測量', '需要測量體溫', '提供素食料理', '甜點', '提供免費WIFI', '無障礙座位', '無障礙入口', '無障礙停車場'], state="readonly", width=10) 
keyword1_box.grid(column=1, row=7, ipadx=5, pady=5, sticky=tk.W+tk.N)
keyword1_box.current(0)

keyword2_box = ttk.Combobox(app, values=['無', '外送', '外帶', '內用', '啤酒', '早餐', '午餐', '晚餐', '洗手間', '適合兒童', '氣氛悠閒', '環境舒適', '適合團體', '接受訂位', '信用卡', '免下車服務', '員工會接受體溫測量', '需要測量體溫', '提供素食料理', '甜點', '提供免費WIFI', '無障礙座位', '無障礙入口', '無障礙停車場'], state="readonly", width=10) 
keyword2_box.grid(column=2, row=7, ipadx=5, pady=5, sticky=tk.W+tk.N)
keyword2_box.current(0)

keyword3_box = ttk.Combobox(app, values=['無', '外送', '外帶', '內用', '啤酒', '早餐', '午餐', '晚餐', '洗手間', '適合兒童', '氣氛悠閒', '環境舒適', '適合團體', '接受訂位', '信用卡', '免下車服務', '員工會接受體溫測量', '需要測量體溫', '提供素食料理', '甜點', '提供免費WIFI', '無障礙座位', '無障礙入口', '無障礙停車場'], state="readonly", width=10) 
keyword3_box.grid(column=3, row=7, ipadx=5, pady=5, sticky=tk.W+tk.N)
keyword3_box.current(0)
'''
def find_restaurant():
    city = city_box.get()
    destination = destination_entry.get()
    restnum = int(restnum_box.get())
    restkind = restkind_box.get()
    foodkind = foodkind_entry.get()
    day = day_box.get()
    time = int(hr_box.get()+min_box.get())
    keyword1 = keyword1_box.get()
    keyword2 = keyword2_box.get()
    keyword3 = keyword3_box.get()
    result = '您的最佳選擇：{}'.format(answer_str)
    result_label.configure(text=result)
'''
def createNewWindow():
    newWindow = tk.Toplevel(app)
    result = '您的最佳選擇：{}'.format(answer_str)
    result_label = tk.Label(newWindow, text = result)
    result_label.pack()

answer_str = ''
for i in range(restnum - 1):
    answer_str += answer[i]
    answer_str += '、'
answer_str += answer[restnum - 1]

result_Button = tk.Button(app, text = '查看結果！', command = createNewWindow, fg = '#8592A2', width=10)
result_Button.grid(column=1, row=10, pady=10, sticky=tk.W+tk.S)

app.mainloop()

#爬蟲爬下來的list:[ [店名1, 評分1, [google 提供關鍵字1],營業時間1, [評論1]],[店名2, 評分2, 營業時間2, 評論2]]

def open_or_not(opentime_list, day, time):
    # 判斷該時段是否有營業 (營業時間的list, 想要去的時間的list)
    for x in range(7):
        
        if opentime_list[x][0] == day and opentime_list[x][1] != "close":
            # 星期相同
            if opentime_list[x][3] == opentime_list[x][4] == "NA":
                # 中午沒有休息:星期幾，營業時間，打烊時間，NA，NA
                if int(opentime_list[x][1]) < time < int(opentime_list[x][2]):
                    return True
                else:
                    return False
            elif opentime_list[x][3] != "NA" and opentime_list[x][4] != "NA":
                # 中午有休息:星期幾，第一次營業時間，第二次營業時間，第一次打烊時間，第二次打烊時間
                if int(opentime_list[x][1]) < time < int(opentime_list[x][3]) or int(opentime_list[x][2]) < time < int(opentime_list[x][4]):
                    return True
                else:
                    return False
        elif opentime_list[x][0] == day and opentime_list[x][1] == "close":
            return False
        else:
            continue

def keyword_index(list_keyword, find_keyword):
    # 算關鍵字分數 (爬蟲爬到的list, 他想要找的關鍵字(最多三個!))
    points = 0

    for x in range(len(find_keyword)):
        
        if str(find_keyword[x]) in list_keyword == True:
            # 如果在爬到的list裡面找到他要的關鍵字 加一分
            points += 1
    
    if points == len(find_keyword):  #所有關鍵字都找到了
        return 12
    elif 0 < points < len(find_keyword):  #只找到部分關鍵字
        return 6
    elif points == 0:  #完全沒有符合的關鍵字
        return 0

def score_index(score):
    # 算評分分數:分數乘以2
    score = int(score) * 2
    return score

def goodwords_index(comment_list, goodwords_list):
    # 算正面字詞分數 (爬蟲爬到的list, 我們自己寫的正面字詞庫)
    points = 0

    for x in range(len(comment_list)):
        if points < 5:
            for y in range(len(comment_list[x])):
                if goodwords_list.count(str(comment_list[x][y])) == 1:
                    points += 0.1            
        elif points == 5:
            break
    
    return points


ratingdic = {}  #放每一家店對應到的積分
rating_record = []  #記錄每家店的積分
final_result = []  # 爬蟲下來的大大list
goodwords = ["好吃", "氣氛好", "服務好", "交通方便", "划算", "美味", "CP值高", "很不錯", "很讚", "喜歡", "很好"]  # 我們自己寫的正面辭庫
answer = []  # 要印出來的答案
keywords = []  #放keywords
city = citybox.get()  #輸入縣市
destination = entrydestination.get()  #輸入更小範圍
restnum = int(restnumbox.get())  #輸入想要的店家數量
restkind = restkindbox.get()  #輸入餐廳種類 (咖啡廳、餐廳...)
foodkind = entryfoodkind.get()  #輸入食物種類
day = daybox.get()  #輸入要去的星期
time = timebox.get()  #輸入要去的時間點 格式:1830
keyword1 = keyword1box.get()  #輸入關鍵字
keyword2 = keyword2box.get()
keyword3 = keyword3box.get()
if keyword1 != "無":
    keywords.append(keyword1)
if keyword2 != "無":
    keywords.append(keyword2)
if keyword3 != "無":
    keywords.append(keyword3)

# ［{"name":"店家一","rating":"店家一評分","keyword":"店家一關鍵字","opentime":[], "review":["評論1", "評論2"..., "評論40"] } ... ]

for x in range(len(shop)):
    rate_index = 0
    if open_or_not(final_result[x]["opentime"], day, time) == True:
        
        if len(keywords) != 0:
            for y in range(len(keywords)):
                rate_index += keyword_index(final_result[x]["keyword"], keywords[y])
        elif len(keywords) == 0:
            rate_index += 12
        rate_index += score_index(final_result[x]["rating"])
        rate_index += goodwords_index(final_result[x]["review"], goodwords)
        ratingdic[str(final_result[x]["name"])] = rate_index
        rating_record.append(rate_index)
    elif open_or_not(final_result[x]["opentime"], day, time) == True:
        continue

rate_index_sorted = sorted(rating_record, reverse = True)  #由高分到低分排列


for x in range(restnum):
    add_index = rating_record.index(rate_index_sorted[])
    answer.append(final_result[add_index]["name"])
    rating_record[add_index] = 0
